name: "aws-eks-karpenter-controller"
# Canonical GitHub repo
github_repo: "cloudposse-terraform-components/aws-eks-karpenter-controller"
# Short description of this project
description: |-
  This component provisions [Karpenter](https://karpenter.sh) on an EKS cluster.
  It requires at least version 0.32.0 of Karpenter, though using the latest
  version is recommended.
usage: |-
  **Stack Level**: Regional

  These instructions assume you are provisioning 2 EKS clusters in the same account and region, named "blue" and "green",
  and alternating between them. If you are only using a single cluster, you can ignore the "blue" and "green" references
  and remove the `metadata` block from the `karpenter` module.

  ```yaml
  components:
    terraform:
      # Base component of all `karpenter` components
      eks/karpenter:
        metadata:
          type: abstract
        vars:
          enabled: true
          eks_component_name: "eks/cluster"
          name: "karpenter"
          # https://github.com/aws/karpenter/tree/main/charts/karpenter
          chart_repository: "oci://public.ecr.aws/karpenter"
          chart: "karpenter"
          chart_version: "v0.36.0"
          # Enable Karpenter to get advance notice of spot instances being terminated
          # See https://karpenter.sh/docs/concepts/#interruption
          interruption_handler_enabled: true
          resources:
            limits:
              cpu: "300m"
              memory: "1Gi"
            requests:
              cpu: "100m"
              memory: "512Mi"
          cleanup_on_fail: true
          atomic: true
          wait: true
          rbac_enabled: true
          # "karpenter-crd" can be installed as an independent helm chart to manage the lifecycle of Karpenter CRDs
          crd_chart_enabled: true
          crd_chart: "karpenter-crd"
          # replicas set the number of Karpenter controller replicas to run
          replicas: 2
          # "settings" controls a subset of the settings for the Karpenter controller regarding batch idle and max duration.
          # you can read more about these settings here: https://karpenter.sh/docs/reference/settings/
          settings:
            batch_idle_duration: "1s"
            batch_max_duration: "10s"
          # The logging settings for the Karpenter controller
          logging:
            enabled: true
            level:
              controller: "info"
              global: "info"
              webhook: "error"
  ```

  ## Provision Karpenter on EKS cluster

  Here we describe how to provision Karpenter on an EKS cluster. We will be using the `plat-ue2-dev` stack as an example.

  ### Provision Service-Linked Roles for EC2 Spot and EC2 Spot Fleet

  Note: If you want to use EC2 Spot for the instances launched by Karpenter, you may need to provision the following
  Service-Linked Role for EC2 Spot:

  - Service-Linked Role for EC2 Spot

  This is only necessary if this is the first time you're using EC2 Spot in the account. Since this is a one-time
  operation, we recommend you do this manually via the AWS CLI:

  ```bash
  aws --profile <namespace>-<tenamt>-gbl-<stage>-admin iam create-service-linked-role --aws-service-name spot.amazonaws.com
  ```

  Note that if the Service-Linked Roles already exist in the AWS account (if you used EC2 Spot or Spot Fleet before), and
  you try to provision them again, you will see the following errors:

  ```text
  An error occurred (InvalidInput) when calling the CreateServiceLinkedRole operation:
  Service role name AWSServiceRoleForEC2Spot has been taken in this account, please try a different suffix
  ```

  For more details, see:

  - https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html
  - https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html

  The process of provisioning Karpenter on an EKS cluster consists of 3 steps.

  ### 1. Provision EKS IAM Role for Nodes Launched by Karpenter

  > [!NOTE]
  >
  > #### VPC assumptions being made
  >
  > We assume you've already created a VPC using our [VPC component](/modules/vpc) and have private subnets already set
  > up. The Karpenter node pools will be launched in the private subnets.

  EKS IAM Role for Nodes launched by Karpenter are provisioned by the `eks/cluster` component. (EKS can also provision a
  Fargate Profile for Karpenter, but deploying Karpenter to Fargate is not recommended.):

  ```yaml
  components:
    terraform:
      eks/cluster-blue:
        metadata:
          component: eks/cluster
          inherits:
            - eks/cluster
        vars:
          karpenter_iam_role_enabled: true
  ```

  > [!NOTE]
  >
  > The AWS Auth API for EKS is used to authorize the Karpenter controller to interact with the EKS cluster.

  Karpenter is installed using a Helm chart. The Helm chart installs the Karpenter controller and a webhook pod as a
  Deployment that needs to run before the controller can be used for scaling your cluster. We recommend a minimum of one
  small node group with at least one worker node.

  As an alternative, you can run these pods on EKS Fargate by creating a Fargate profile for the karpenter namespace.
  Doing so will cause all pods deployed into this namespace to run on EKS Fargate. Do not run Karpenter on a node that is
  managed by Karpenter.

  See
  [Run Karpenter Controller...](https://aws.github.io/aws-eks-best-practices/karpenter/#run-the-karpenter-controller-on-eks-fargate-or-on-a-worker-node-that-belongs-to-a-node-group)
  for more details.

  We provision IAM Role for Nodes launched by Karpenter because they must run with an Instance Profile that grants
  permissions necessary to run containers and configure networking.

  We define the IAM role for the Instance Profile in `components/terraform/eks/cluster/controller-policy.tf`.

  Note that we provision the EC2 Instance Profile for the Karpenter IAM role in the `components/terraform/eks/karpenter`
  component (see the next step).

  Run the following commands to provision the EKS Instance Profile for Karpenter and the IAM role for instances launched
  by Karpenter on the blue EKS cluster and add the role ARNs to the EKS Auth API:

  ```bash
  atmos terraform plan eks/cluster-blue -s plat-ue2-dev
  atmos terraform apply eks/cluster-blue -s plat-ue2-dev
  ```

  For more details, refer to:

  - [Getting started with Terraform](https://aws-ia.github.io/terraform-aws-eks-blueprints/getting-started/)
  - [Getting started with `eksctl`](https://karpenter.sh/docs/getting-started/getting-started-with-karpenter/)

  ### 2. Provision `karpenter` component

  In this step, we provision the `components/terraform/eks/karpenter` component, which deploys the following resources:

  - Karpenter CustomerResourceDefinitions (CRDs) using the Karpenter CRD Chart and the `helm_release` Terraform resource
  - Karpenter Kubernetes controller using the Karpenter Helm Chart and the `helm_release` Terraform resource
  - EKS IAM role for Kubernetes Service Account for the Karpenter controller (with all the required permissions)
  - An SQS Queue and Event Bridge rules for handling Node Interruption events (i.e. Spot)

  Create a stack config for the blue Karpenter component in `stacks/catalog/eks/clusters/blue.yaml`:

  ```yaml
  eks/karpenter-blue:
    metadata:
      component: eks/karpenter
      inherits:
        - eks/karpenter
    vars:
      eks_component_name: eks/cluster-blue
  ```

  Run the following commands to provision the Karpenter component on the blue EKS cluster:

  ```bash
  atmos terraform plan eks/karpenter-blue -s plat-ue2-dev
  atmos terraform apply eks/karpenter-blue -s plat-ue2-dev
  ```

  ### 3. Provision `karpenter-node-pool` component

  In this step, we provision the `components/terraform/eks/karpenter-node-pool` component, which deploys Karpenter
  [NodePools](https://karpenter.sh/v0.36/getting-started/getting-started-with-karpenter/#5-create-nodepool) using the
  `kubernetes_manifest` resource.

  > [!TIP]
  >
  > #### Why use a separate component for NodePools?
  >
  > We create the NodePools as a separate component since the CRDs for the NodePools are created by the Karpenter
  > component. This helps manage dependencies.

  First, create an abstract component for the `eks/karpenter-node-pool` component:

  ```yaml
  components:
    terraform:
      eks/karpenter-node-pool:
        metadata:
          type: abstract
        vars:
          enabled: true
          # Disabling Manifest Experiment disables stored metadata with Terraform state
          # Otherwise, the state will show changes on all plans
          helm_manifest_experiment_enabled: false
          node_pools:
            default:
              # Whether to place EC2 instances launched by Karpenter into VPC private subnets. Set it to `false` to use public subnets
              private_subnets_enabled: true
              # You can use disruption to set the maximum instance lifetime for the EC2 instances launched by Karpenter.
              # You can also configure how fast or slow Karpenter should add/remove nodes.
              # See more: https://karpenter.sh/v0.36/concepts/disruption/
              disruption:
                max_instance_lifetime: "336h" # 14 days
              # Taints can be used to prevent pods without the right tolerations from running on this node pool.
              # See more: https://karpenter.sh/v0.36/concepts/nodepools/#taints
              taints: []
              total_cpu_limit: "1k"
              # Karpenter node pool total memory limit for all pods running on the EC2 instances launched by Karpenter
              total_memory_limit: "1200Gi"
              # Set acceptable (In) and unacceptable (Out) Kubernetes and Karpenter values for node provisioning based on
              # Well-Known Labels and cloud-specific settings. These can include instance types, zones, computer architecture,
              # and capacity type (such as AWS spot or on-demand).
              # See https://karpenter.sh/v0.36/concepts/nodepools/#spectemplatespecrequirements for more details
              requirements:
                - key: "karpenter.sh/capacity-type"
                  operator: "In"
                  # See https://karpenter.sh/docs/concepts/nodepools/#capacity-type
                  # Allow fallback to on-demand instances when spot instances are unavailable
                  # By default, Karpenter uses the "price-capacity-optimized" allocation strategy
                  # https://aws.amazon.com/blogs/compute/introducing-price-capacity-optimized-allocation-strategy-for-ec2-spot-instances/
                  # It is currently not configurable, but that may change in the future.
                  # See https://github.com/aws/karpenter-provider-aws/issues/1240
                  values:
                    - "on-demand"
                    - "spot"
                - key: "kubernetes.io/os"
                  operator: "In"
                  values:
                    - "linux"
                - key: "kubernetes.io/arch"
                  operator: "In"
                  values:
                    - "amd64"
                # The following two requirements pick instances such as c3 or m5
                - key: karpenter.k8s.aws/instance-category
                  operator: In
                  values: ["c", "m", "r"]
                - key: karpenter.k8s.aws/instance-generation
                  operator: Gt
                  values: ["2"]
  ```

  Now, create the stack config for the blue Karpenter NodePool component in `stacks/catalog/eks/clusters/blue.yaml`:

  ```yaml
  eks/karpenter-node-pool/blue:
    metadata:
      component: eks/karpenter-node-pool
      inherits:
        - eks/karpenter-node-pool
    vars:
      eks_component_name: eks/cluster-blue
  ```

  Finally, run the following commands to deploy the Karpenter NodePools on the blue EKS cluster:

  ```bash
  atmos terraform plan eks/karpenter-node-pool/blue -s plat-ue2-dev
  atmos terraform apply eks/karpenter-node-pool/blue -s plat-ue2-dev
  ```

  ## Node Interruption

  Karpenter also supports listening for and responding to Node Interruption events. If interruption handling is enabled,
  Karpenter will watch for upcoming involuntary interruption events that would cause disruption to your workloads. These
  interruption events include:

  - Spot Interruption Warnings
  - Scheduled Change Health Events (Maintenance Events)
  - Instance Terminating Events
  - Instance Stopping Events

  > [!TIP]
  >
  > #### Interruption Handler vs. Termination Handler
  >
  > The Node Interruption Handler is not the same as the Node Termination Handler. The latter is always enabled and
  > cleanly shuts down the node in 2 minutes in response to a Node Termination event. The former gets advance notice that
  > a node will soon be terminated, so it can have 5-10 minutes to shut down a node.

  For more details, see refer to the [Karpenter docs](https://karpenter.sh/v0.32/concepts/disruption/#interruption) and
  [FAQ](https://karpenter.sh/v0.32/faq/#interruption-handling)

  To enable Node Interruption handling, set `var.interruption_handler_enabled` to `true`. This will create an SQS queue
  and a set of Event Bridge rules to deliver interruption events to Karpenter.

  ## Custom Resource Definition (CRD) Management

  Karpenter ships with a few Custom Resource Definitions (CRDs). In earlier versions of this component, when installing a
  new version of the `karpenter` helm chart, CRDs were not be upgraded at the same time, requiring manual steps to upgrade
  CRDs after deploying the latest chart. However Karpenter now supports an additional, independent helm chart for CRD
  management. This helm chart, `karpenter-crd`, can be installed alongside the `karpenter` helm chart to automatically
  manage the lifecycle of these CRDs.

  To deploy the `karpenter-crd` helm chart, set `var.crd_chart_enabled` to `true`. (Installing the `karpenter-crd` chart
  is recommended. `var.crd_chart_enabled` defaults to `false` to preserve backward compatibility with older versions of
  this component.)

  ## Troubleshooting

  For Karpenter issues, checkout the [Karpenter Troubleshooting Guide](https://karpenter.sh/docs/troubleshooting/)
tags:
  - component/eks/karpenter
  - layer/eks
  - provider/aws
  - provider/helm
# Categories of this project
categories:
  - component/eks/karpenter
  - layer/eks
  - provider/aws
  - provider/helm
# License of this project
license: "APACHE2"
# Badges to display
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse-terraform-components/aws-eks-karpenter-controller.svg?style=for-the-badge
    url: https://github.com/cloudposse-terraform-components/aws-eks-karpenter-controller/releases/latest
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com
references:
  - name: "Karpenter Getting Started: Create NodePool"
    description: ""
    url: "https://karpenter.sh/v0.36/getting-started/getting-started-with-karpenter/#5-create-nodepool"
  - name: "Karpenter Concepts: Interruption"
    description: ""
    url: "https://karpenter.sh/v0.36/concepts/disruption/#interruption"
  - name: "Karpenter Concepts: Taints"
    description: ""
    url: "https://karpenter.sh/v0.36/concepts/nodepools/#taints"
  - name: "Karpenter Concepts: Requirements"
    description: ""
    url: "https://karpenter.sh/v0.36/concepts/nodepools/#spectemplatespecrequirements"
  - name: "Karpenter Getting Started"
    description: ""
    url: "https://karpenter.sh/v0.36/getting-started/getting-started-with-karpenter/"
  - name: "AWS EKS Best Practices: Karpenter"
    description: ""
    url: "https://aws.github.io/aws-eks-best-practices/karpenter"
  - name: "Karpenter"
    description: ""
    url: "https://karpenter.sh"
  - name: "AWS Blog: Introducing Karpenter"
    description: ""
    url: "https://aws.amazon.com/blogs/aws/introducing-karpenter-an-open-source-high-performance-kubernetes-cluster-autoscaler"
  - name: "aws/karpenter"
    description: ""
    url: "https://github.com/aws/karpenter"
  - name: "EC2 Spot Workshops: Karpenter"
    description: ""
    url: "https://ec2spotworkshops.com/karpenter.html"
  - name: "EKS Workshop: Karpenter"
    description: ""
    url: "https://www.eksworkshop.com/docs/autoscaling/compute/karpenter/"
  - name: "EKS Pod Execution Role"
    description: ""
    url: "https://docs.aws.amazon.com/eks/latest/userguide/pod-execution-role.html"
  - name: "AWS KB: Fargate troubleshoot profile creation"
    description: ""
    url: "https://aws.amazon.com/premiumsupport/knowledge-center/fargate-troubleshoot-profile-creation"
  - name: "HashiCorp Learn: Kubernetes CRD"
    description: ""
    url: "https://learn.hashicorp.com/tutorials/terraform/kubernetes-crd-faas"
  - name: "AWS Batch: Spot Fleet IAM role"
    description: ""
    url: "https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html"
  - name: "AWS IAM: Service-linked roles"
    description: ""
    url: "https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html"
  - name: "Karpenter Troubleshooting Guide"
    description: ""
    url: "https://karpenter.sh/docs/troubleshooting/"
  - name: "Getting started with Terraform (EKS Blueprints)"
    description: ""
    url: "https://aws-ia.github.io/terraform-aws-eks-blueprints/getting-started/"
  - name: "Getting started with eksctl for Karpenter"
    description: ""
    url: "https://karpenter.sh/docs/getting-started/getting-started-with-karpenter/"
related:
  - name: "Cloud Posse Terraform Modules"
    description: Our collection of reusable Terraform modules used by our reference architectures.
    url: "https://docs.cloudposse.com/modules/"
  - name: "Atmos"
    description: "Atmos is like docker-compose but for your infrastructure"
    url: "https://atmos.tools"
contributors: [] # If included generates contribs
